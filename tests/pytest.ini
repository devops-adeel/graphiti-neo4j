[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Async configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers for test categorization
markers = 
    benchmark: Performance benchmarking tests
    integration: Integration tests requiring Neo4j
    concurrent: Concurrent access pattern tests
    temporal: Temporal query and fact invalidation tests
    slow: Tests that take more than 5 seconds
    warmup: Tests requiring cache warmup

# Timeout settings
timeout = 60
timeout_method = thread

# Output configuration
addopts = 
    -v
    --strict-markers
    --tb=short
    --color=yes

# Coverage settings
[coverage:run]
source = tests
omit = 
    */fixtures/*
    */conftest.py

# Log capture
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Benchmark storage
[benchmark]
storage = file://.benchmarks
compare_fail = mean:5%